@using System.Data
@using NonFactors.Mvc.Grid
@model DataTable

<script>
    function showPopup(message) {
        var popup = document.getElementById("popupMessage");
        var popupText = document.getElementById("popupMessageText");
        var popupOKButton = document.getElementById("popupOKButton");

        popupText.textContent = message; // Set the message text
        popup.style.display = "block";

        popupOKButton.addEventListener("click", function () {
            popup.style.display = "none"; // Hide the popup when OK button is clicked
        });
    }

    function handleMessages(message) {
        showPopup(message);
    }
</script>
<div id="popupMessage" class="dividerblack popborder" style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: #f0f0f0; color: #fff; padding: 30px; border-radius: 10px; z-index: 1000; display: none; text-align: center;">
    <span id="popupMessageText" style="display: block; margin-bottom: 10px;"></span>
    <button id="popupOKButton" style="padding: 10px 20px; color: white; border: none; border-radius: 5px; cursor: pointer;">OK</button>
</div>

<style>
    .popborder {
        border: 10px solid #fff;
    }
</style>
<form asp-action="GetReports" asp-controller="Reports" method="post">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <div class="row" style="margin-top:10px">
        <div class="col-md-12 col-lg-0"></div>
        <div class="col-12 col-sm-12 col-md-12 col-lg-12">
            <div class="card">
                <div class="card-body dividerblack">
                    <div class="row gy-4">
                        <div class="col-sm-12 col-md-12 col-lg-12">
                            <h2 class="centered text-white" style="font-family:'Lucida Bright';text-align: center; margin: 0;">
                                Report Output
                            </h2>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>


    <br />



    <div class="row" style="margin-top:30px">
        <div class="col-md-12 col-lg-0"></div>
        <div class="col-12 col-sm-12 col-md-12 col-lg-12">
            <div class="card">
                <div class="card-body dividerblack">
                    <div class="row gy-4">
                        
                        <div class="col-sm-4 col-md-4 col-lg-4">
                            @{
                                var reportModels = (IEnumerable<GenericReportModel>)ViewData["reportid"];
                                var dropdownOptions = new List<SelectListItem>();

                                foreach (var reportModel in reportModels)
                                {
                                 dropdownOptions.Add(new SelectListItem
                                    {
                                        Value = reportModel.ReportName, // Set the value to the ReportName
                                        Text = reportModel.ReportName
                                    });
                                 }

                                var selectedReport = ViewData["selectedReport"] as string; // Get the selected report from ViewData
                            }

                            <div class="form-floating form-floating-outline mb-4">
                                @Html.DropDownList("ReportId", dropdownOptions, "Select Report Name", new { @class = "form-control", onchange = "updateHiddenInput(this.value)", required = "required" })
                                <label for="ReportId" class="control-label">Report Name</label>
                                @Html.Hidden("inputValue", selectedReport)
                            </div>

                            <script>
                                // Function to update the hidden input value when dropdown selection changes
                                function updateHiddenInput(value) {
                                    document.getElementById('inputValue').value = value;
                                }
                            </script>


                        </div>

                        <div class="col-sm-4 col-md-4 col-lg-4">
                            <div class="form-floating form-floating-outline mb-4 custom-date-picker">
                                <input type="date" class="form-control" id="FromDate" name="FromDate" placeholder="FromDate" />
                                <label for="FromDate" class="control-label">FromDate</label>
                            </div>
                        </div>

                        <div class="col-sm-4 col-md-4 col-lg-4">
                            <div class="form-floating form-floating-outline mb-4 custom-date-picker">
                                <input type="date" class="form-control" id="ToDate" name="ToDate" placeholder="ToDate" />
                                <label for="ToDate" class="control-label">ToDate</label>
                            </div>

                        </div>
                    </div>

                    <div class="row gy-4">
                        <div class="col-md-12 d-flex justify-content-center">


                            <button type="submit" style="width:180px" name="buttonType" value="submit" class="btn btn-primaryellow">GetReport</button>
                        </div>

                        </div>
                    </div>


                 


                    @if (Model != null)
                    {

                        <div class="row gy-4">
                            <div class="col-md-12 col-lg-0.5">
                            </div>
                            <div class="col-md-12 col-lg-12">
                                <div class="card">
                                    <div class="card-body ">
                                        <div class="table-responsive">

                                            <center>
                                                <h2 class="centered text-black" style="font-family:'Lucida Bright'; color: #fff;">@ViewBag.Reportname</h2>
                                            </center>
                                            <br />
                                            <table id="dataTable" class="table table-bordered" style="border: 0px solid #fff;">
                                                <thead style="background-color: black; color: white;">
                                                    <tr>
                                                        @foreach (DataColumn column in Model.Columns)
                                                        {
                                                            <th style="font-size: 16px; color:white;border: 1px solid #fff;">@column.ColumnName</th>
                                                        }
                                                    </tr>
                                                </thead>

                                                <tbody class="card-body dividerblack">

                                                    @foreach (DataRow row in Model.Rows)
                                                    {

                                                        <tr>

                                                            @foreach (var cell in row.ItemArray)
                                                            {
                                                                <td style="border: 1px solid #000000;">@cell</td>
                                                            }

                                                        </tr>

                                                    }

                                                </tbody>

                                            </table>
                                            <div id="pagination-controls" style="text-align: center; margin-top: 10px;">
                                                <button id="prev-btn" style="background-color: black; color: white; border: none; padding: 0px 6px; cursor: pointer; font-size: 16px; border-radius: 5px; margin: 0 5px;">Previous</button>
                                                <div id="page-numbers" style="display: inline-block; vertical-align: middle;"></div>
                                                <button id="next-btn" style="background-color: black; color: white; border: none; padding: 0px 6px; cursor: pointer; font-size: 16px; border-radius: 5px; margin: 0 5px;">Next</button>
                                            </div>
                                            <script>
                                                document.addEventListener('DOMContentLoaded', function () {
                                                    const rowsPerPage = 5; // Number of rows per page
                                                    const table = document.querySelector('.table tbody'); // Select the table body
                                                    const rows = Array.from(table.querySelectorAll('tr')); // Get all rows
                                                    const totalRows = rows.length; // Total number of rows
                                                    const totalPages = Math.ceil(totalRows / rowsPerPage); // Calculate total pages

                                                    let currentPage = 1; // Current page number

                                                    // Function to display rows for a given page
                                                    function showPage(page) {
                                                        rows.forEach((row, index) => {
                                                            row.style.display = (Math.floor(index / rowsPerPage) + 1 === page) ? '' : 'none'; // Show or hide row
                                                        });

                                                        updatePageNumbers(); // Update the page number buttons
                                                        document.getElementById('prev-btn').disabled = (page === 1); // Disable 'prev' button if on first page
                                                        document.getElementById('next-btn').disabled = (page === totalPages); // Disable 'next' button if on last page
                                                    }

                                                    // Function to create and update page number buttons
                                                    function updatePageNumbers() {
                                                        const pageNumbersContainer = document.getElementById('page-numbers');
                                                        pageNumbersContainer.innerHTML = ''; // Clear previous buttons

                                                        // Create page number buttons
                                                        for (let i = 1; i <= totalPages; i++) {
                                                            const pageButton = document.createElement('button');
                                                            pageButton.textContent = i;
                                                            pageButton.style.backgroundColor = (i === currentPage) ? 'white' : 'black'; // Highlight current page
                                                            pageButton.style.color = (i === currentPage) ? 'black' : 'white';
                                                            pageButton.style.border = '1px solid black'; // Add a border for better visibility
                                                            pageButton.style.padding = '5px 10px';
                                                            pageButton.style.cursor = 'pointer';
                                                            pageButton.style.fontSize = '16px';
                                                            pageButton.style.borderRadius = '5px';
                                                            pageButton.style.margin = '0 3px';

                                                            // Add click event listener to update current page
                                                            pageButton.addEventListener('click', () => {
                                                                currentPage = i;
                                                                showPage(currentPage);
                                                            });

                                                            pageNumbersContainer.appendChild(pageButton); // Add button to container
                                                        }
                                                    }

                                                    // Event listener for 'prev' button
                                                    document.getElementById('prev-btn').addEventListener('click', () => {
                                                        if (currentPage > 1) {
                                                            currentPage--;
                                                            showPage(currentPage);
                                                        }
                                                    });

                                                    // Event listener for 'next' button
                                                    document.getElementById('next-btn').addEventListener('click', () => {
                                                        if (currentPage < totalPages) {
                                                            currentPage++;
                                                            showPage(currentPage);
                                                        }
                                                    });

                                                    showPage(currentPage); // Initial page display
                                                });
                                            </script>


                                            <br />
                                            <center>

                                            <button class="btn btn-primarywhite" onclick="exportToCSV()">Export to Excel</button>
                                            </center>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>


                        <script>
                            function exportToExcel() {
                                try {
                                    // Select the table element
                                    var table = document.getElementById('dataTable');

                                    // Create a new Excel instance
                                    var excel = new ExcelJS.Workbook();
                                    var sheet = excel.addWorksheet('Sheet 1');

                                    // Iterate over each row and column in the table to add data to Excel sheet
                                    for (var i = 0; i < table.rows.length; i++) {
                                        var row = sheet.addRow();
                                        var cells = table.rows[i].cells;
                                        for (var j = 0; j < cells.length; j++) {
                                            row.getCell(j + 1).value = cells[j].innerText;
                                        }
                                    }

                                    // Save the workbook as an Excel file
                                    excel.xlsx.writeBuffer().then(function (buffer) {
                                        saveAs(new Blob([buffer], { type: "application/octet-stream" }), 'table_data.xlsx');
                                    });
                                } catch (error) {
                                    console.error('Export to Excel failed:', error);
                                    alert('Export to Excel failed. Please try again.' + error);
                                }
                            }
                        function exportToCSV() {
                            try {
                                // Select the table element
                                var table = document.getElementById('dataTable');
                                var csvContent = "";

                                // Loop through each row of the table
                                for (var i = 0; i < table.rows.length; i++) {
                                    var rowData = [];
                                    var cells = table.rows[i].cells;

                                    for (var j = 0; j < cells.length; j++) {
                                        // Escape double quotes and commas in the cell value
                                        var cellText = cells[j].innerText.replace(/"/g, '""');
                                        rowData.push('"' + cellText + '"');
                                    }

                                    csvContent += rowData.join(",") + "\n";
                                }

                                // Create a Blob from the CSV content
                                var blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });

                                // Trigger the file download using FileSaver.js or a manual anchor click
                                var link = document.createElement("a");
                                var url = URL.createObjectURL(blob);
                                link.setAttribute("href", url);
                                link.setAttribute("download", "table_data.csv");
                                document.body.appendChild(link);
                                link.click();
                                document.body.removeChild(link);
                            } catch (error) {
                                console.error('Export to CSV failed:', error);
                                alert('Export to CSV failed. Please try again. ' + error);
                            }
                        }
                        </script>
                        <!-- Include ExcelJS library -->
                        <script src="https://cdnjs.cloudflare.com/ajax/libs/exceljs/4.4.0/exceljs.min.js"></script>
                        <!-- Include FileSaver.js library for saving Blob objects -->
                        <script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.5/FileSaver.min.js"></script>

                    }

</form>



@if (ViewBag.Message != null)
{
    <script>
        handleMessages("@ViewBag.Message");
    </script>
}