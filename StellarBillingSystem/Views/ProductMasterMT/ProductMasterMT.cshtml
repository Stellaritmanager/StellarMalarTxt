@model StellarBillingSystem_Malar.Models.ProductModelMT
@using System.Data
@using NonFactors.Mvc.Grid
@{
    ViewData["Title"] = "ProductMasterMT";
}

<script>
    function showPopup(message) {
        var popup = document.getElementById("popupMessage");
        var popupText = document.getElementById("popupMessageText");
        var popupOKButton = document.getElementById("popupOKButton");

        popupText.textContent = message; // Set the message text
        popup.style.display = "block";

        // Close popup when OK button is clicked
        popupOKButton.addEventListener("click", function () {
            closePopup();
        });

        // Close popup when clicking outside of the message box
        document.addEventListener("click", function (event) {
            if (!popup.contains(event.target) && !popupOKButton.contains(event.target)) {
                closePopup();
            }
        });
    }

    function closePopup() {
        var popup = document.getElementById("popupMessage");
        popup.style.display = "none"; // Hide the popup
    }

    function handleMessages(message) {
        showPopup(message);
    }
</script>

<div id="popupMessage" style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background: rgba(255, 255, 255, 0.1); backdrop-filter: blur(10px); -webkit-backdrop-filter: blur(10px); color:black; padding: 30px; border: 1px solid #000000; border-radius: 10px; z-index: 1000; display: none; text-align: center;">
    <span id="popupMessageText" style="display: block; margin-bottom: 10px;"></span>
    <button id="popupOKButton" style="padding: 10px 20px; background-color: rgba(255, 255, 255, 0.2); color: black; border: none; border-radius: 5px; cursor: pointer;">OK</button>
</div>

<style>
    .popborder {
        border: 10px solid #fff;
    }
</style>

<form asp-controller="ProductMasterMT" autocomplete="off">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>

    <div class="row" style="margin-top:10px">
        <div class="col-md-12 col-lg-0"></div>
        <div class="col-12 col-sm-12 col-md-12 col-lg-12">
            <div class="card">
                <div class="card-body dividerblack">
                    <div class="row gy-4">
                        <div class="col-sm-12 col-md-12 col-lg-12">
                            <h2 class="centered text-white" style="font-family:'Lucida Bright';text-align: center; margin: 0;">
                                Product Master
                            </h2>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <br />

    <div class="row" style="height:8%"></div>

    <div class="row" style="margin-top:30px">
        <div class="col-md-12 col-lg-0"></div>
        <div class="col-12 col-sm-12 col-md-12 col-lg-12">
            <div class="card">
                <div class="card-body dividerblack">
                    <div class="row gy-4">
                        <div class="col-sm-1 col-md-1 col-lg-1"></div>
                        <div class="col-sm-4 col-md-4 col-lg-4">

                            <div class="form-floating form-floating-outline mb-4">
                                <input type="ProductCode" id="ProductCode" class="form-control" placeholder="ProductCode" name="ProductCode" value="@Model.ProductCode" />
                                <label asp-for="ProductCode" class="control-label">Product Code</label>
                                <span id="ProductCodeError" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-sm-4 col-md-4 col-lg-4">
                            <div class="form-floating form-floating-outline mb-4">
                                <input type="Barcode" id="Barcode" class="form-control" placeholder="Barcode" name="Barcode" value="@Model.Barcode" />
                                <label asp-for="Barcode" class="control-label">Barcode</label>
                                <span id="BarcodeError" class="text-danger"></span>
                            </div>
                        </div>

                        <div class="form-floating form-floating-outline mb-4">


                            @{
                                var screenList = ((IEnumerable<StellarBillingSystem_Malar.Models.CategoryModelMT>)ViewData["catname"])
                                .Select(m => new SelectListItem
            {
                Value = m.CategoryID.ToString(), // Assuming ScreenId is of type int
                Text = $"{m.CategoryName}"
            });
                            }

                            @Html.DropDownListFor(model => model.CategoryID,
                                     new SelectList((IEnumerable<StellarBillingSystem_Malar.Models.CategoryModelMT>)ViewData["catname"], "CategoryID", "CategoryName", Model.CategoryID),
                                     "Select Category",
                                     new { @class = "form-control", @id = "CategoryName" })

                            <label asp-for="CategoryID" class="control-label">Category Name</label>
                            <span id="CategoryNameError" class="text-danger"></span>
                        </div>
                    </div>



                    <div class="col-sm-1 col-md-1 col-lg-1">
                        <button type="submit" style="width:95px;align-items:center; height:50px;" value="Get" asp-action="GetProduct" formmethod="get" name="buttonType" class="btn-primaryellow" onclick="return validateGet()">Get</button>

                    </div>

                    <div class="form-floating form-floating-outline mb-4">


                        @{
                            var brand = ((IEnumerable<StellarBillingSystem_Malar.Models.BrandMasterModelMT>)ViewData["brandname"])
                            .Select(m => new SelectListItem
            {
                Value = m.BrandID.ToString(), // Assuming ScreenId is of type int
                Text = $"{m.BrandName}"
            });
                        }

                        @Html.DropDownListFor(model => model.BrandID,
                                 new SelectList((IEnumerable<StellarBillingSystem_Malar.Models.BrandMasterModelMT>)ViewData["brandname"], "BrandID", "BrandName", Model.BrandID),
                                 "Select Brand",
                                 new { @class = "form-control", @id = "BrandName" })

                        <label asp-for="BrandID" class="control-label">Brand Name</label>
                        <span id="BrandNameError" class="text-danger"></span>
                    </div>

                    <div class="form-floating form-floating-outline mb-4">


                        @{
                            var size = ((IEnumerable<StellarBillingSystem_Malar.Models.SizeMasterModelMT>)ViewData["sizename"])
                            .Select(m => new SelectListItem
            {
                Value = m.SizeName.ToString(), // Assuming ScreenId is of type int
                Text = $"{m.SizeName}"
            });
                        }

                        @Html.DropDownListFor(model => model.SizeName,
                                 new SelectList((IEnumerable<StellarBillingSystem_Malar.Models.SizeMasterModelMT>)ViewData["sizename"], "SizeName", "SizeName", Model.SizeName),
                                 "Select Size",
                                 new { @class = "form-control", @id = "SizeName" })

                        <label asp-for="SizeName" class="control-label">Size Name</label>
                        <span id="SizeNameError" class="text-danger"></span>
                    </div>

                    <div class="form-floating form-floating-outline mb-4">
                        <input type="ProductName" id="ProductName" class="form-control" placeholder="ProductName" name="ProductName" value="@Model.ProductName" />
                        <label asp-for="ProductName" class="control-label">ProductName</label>
                        <span id="ProductNameError" class="text-danger"></span>
                    </div>

                    <div class="form-floating form-floating-outline mb-4">

                        <input type="Price" id="Price" class="form-control" placeholder="Price" name="Price" value="@(Model?.Price != 0 ? Model.Price.ToString() : "")" />
                        <label asp-for="Price" class="control-label">Price</label>
                        <span id="PriceError" class="text-danger"></span>
                    </div>

                    <div class="form-floating form-floating-outline mb-4">
                        <input type="number" id="NoofItem" class="form-control" placeholder="NoofItem" name="NoofItem" value="@(Model?.NoofItem != 0 ? Model.NoofItem.ToString() : "")" />
                        <label asp-for="NoofItem" class="control-label">NoofItem</label>
                        <span id="NoofItemError" class="text-danger"></span>
                    </div>

                </div>
                <div class="row gy-4">
                    <div class="col-sm-4 col-md-4 col-lg-4"></div>
                    <div class="col-sm-1 col-md-1 col-lg-1">
                        <button type="submit" asp-action="AddProduct" value="save" name="buttonType" formmethod="post" class="btn btn-success" onclick="return validateSave()">Save</button>
                    </div>
                    <div class="col-sm-4 col-md-4 col-lg-4">
                        <button type="submit" asp-action="AddProduct" value="Delete" name="buttonType" class="btn btn-danger" onclick="return validateDelete()">Delete</button>
                    </div>
                    <div class="col-sm-3 col-md-3 col-lg-3"></div>

                </div>
                <br />
            </div>
        </div>
    </div>
    <div class="col-md-12 col-lg-2"></div>
    </div>



    @{
        var dataTable = ViewData["Productdata"] as DataTable;
    }


    <div class="row" style="margin-top:30px">
        <div class="col-md-12 col-lg-0"></div>
        <div class="col-md-12 col-lg-12">
            <div class="card">
                <div class="card-body dividerblack">
                    <h3 class="centered text-white" style="font-family: 'Lucida Bright'; margin-bottom: 20px; text-align: center;">Sizes</h3>
                    <table class="table table-bordered" style="border: 1px solid black;">
                        <thead style="background-color: black; color: white;">
                            <tr>
                                <th>Product Code</th>
                                <th>Barcode</th>
                                <th>Product Name</th>
                                <th>Price</th>
                                <th>Stock</th>
                                

                            </tr>
                        </thead>
                        <tbody>
                            @if (dataTable != null)
                            {
                                foreach (DataRow row in dataTable.Rows)
                                {
                                    <tr>
                                        <td>@row["ProductCode"]</td>
                                        <td>@row["Barcode"]</td>
                                        <td>@row["ProductName"]</td>
                                        <td>@row["Price"]</td>
                                        <td>@row["NoofItem"]</td>

                                    </tr>
                                }
                            }
                        </tbody>
                    </table><div id="pagination-controls" style="text-align: center; margin-top: 10px;">
                        <button id="prev-btn" style="background-color: cadetblue; color: white; border: none; padding: 0px 6px; cursor: pointer; font-size: 16px; border-radius: 5px; margin: 0 5px;">Previous</button>
                        <div id="page-numbers" style="background-color: cadetblue; color: white; border: none; padding: 0px 6px;display: inline-block; vertical-align: middle;"></div>
                        <button id="next-btn" style="background-color: cadetblue; color: white; border: none; padding: 0px 6px; cursor: pointer; font-size: 16px; border-radius: 5px; margin: 0 5px;">Next</button>
                    </div>

                    <script>
                        document.addEventListener('DOMContentLoaded', function () {
                            const rowsPerPage = 5; // Number of rows per page
                            const table = document.querySelector('.table tbody'); // Select the table body
                            const rows = Array.from(table.querySelectorAll('tr')); // Get all rows
                            const totalRows = rows.length; // Total number of rows
                            const totalPages = Math.ceil(totalRows / rowsPerPage); // Calculate total pages

                            let currentPage = 1; // Current page number

                            // Function to display rows for a given page
                            function showPage(page) {
                                rows.forEach((row, index) => {
                                    row.style.display = (Math.floor(index / rowsPerPage) + 1 === page) ? '' : 'none'; // Show or hide row
                                });

                                updatePageNumbers(); // Update the page number buttons
                                document.getElementById('prev-btn').disabled = (page === 1); // Disable 'prev' button if on first page
                                document.getElementById('next-btn').disabled = (page === totalPages); // Disable 'next' button if on last page
                            }

                            // Function to create and update page number buttons
                            function updatePageNumbers() {
                                const pageNumbersContainer = document.getElementById('page-numbers');
                                pageNumbersContainer.innerHTML = ''; // Clear previous buttons

                                // Create page number buttons
                                for (let i = 1; i <= totalPages; i++) {
                                    const pageButton = document.createElement('button');
                                    pageButton.textContent = i;
                                    pageButton.style.backgroundColor = (i === currentPage) ? 'black' : 'white'; // Highlight current page
                                    pageButton.style.color = (i === currentPage) ? 'white' : 'black';
                                    pageButton.style.border = 'none';
                                    pageButton.style.padding = '5px 10px';
                                    pageButton.style.cursor = 'pointer';
                                    pageButton.style.fontSize = '16px';
                                    pageButton.style.borderRadius = '5px';
                                    pageButton.style.margin = '0 3px';

                                    // Add click event listener to update current page
                                    pageButton.addEventListener('click', () => {
                                        currentPage = i;
                                        showPage(currentPage);
                                    });

                                    pageNumbersContainer.appendChild(pageButton); // Add button to container
                                }
                            }

                            // Event listener for 'prev' button
                            document.getElementById('prev-btn').addEventListener('click', () => {
                                if (currentPage > 1) {
                                    currentPage--;
                                    showPage(currentPage);
                                }
                            });

                            // Event listener for 'next' button
                            document.getElementById('next-btn').addEventListener('click', () => {
                                if (currentPage < totalPages) {
                                    currentPage++;
                                    showPage(currentPage);
                                }
                            });

                            showPage(currentPage); // Initial page display
                        });

                    </script>

                </div>
            </div>
        </div>
    </div>



    @if (ViewBag.Message != null)
    {
        <script>
            handleMessages("@ViewBag.Message");
        </script>
        ViewBag.Message = null;
    }
    @if (ViewBag.ErrorMessage != null)
    {
        <script>
            handleMessages("@ViewBag.ErrorMessage");
        </script>
        ViewBag.ErrorMessage = null;
    }


    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.10.24/css/jquery.dataTables.min.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.datatables.net/1.10.24/js/jquery.dataTables.min.js"></script>




</form>

<script>
    function validateSave() {
        clearErrors();

        const productCode = document.getElementById("ProductCode").value.trim();
        const barcode = document.getElementById("Barcode").value.trim();
        const category = document.getElementById("CategoryName").value;
        const brand = document.getElementById("BrandName").value;
        const size = document.getElementById("SizeName").value;
        const productName = document.getElementById("ProductName").value.trim();
        const price = document.getElementById("Price").value.trim();
        const noOfItem = document.getElementById("NoofItem").value.trim();

        let isValid = true;

        if (!productCode) {
            document.getElementById("ProductCodeError").innerText = "Product Code is required.";
            isValid = false;
        }

        if (!barcode) {
            document.getElementById("BarcodeError").innerText = "Barcode is required.";
            isValid = false;
        }

        if (!category || category === "Select Category") {
            document.getElementById("CategoryNameError").innerText = "Please select a category.";
            isValid = false;
        }

        if (!brand || brand === "Select Brand") {
            document.getElementById("BrandNameError").innerText = "Please select a brand.";
            isValid = false;
        }

        if (!size || size === "Select Size") {
            document.getElementById("SizeNameError").innerText = "Please select a size.";
            isValid = false;
        }

        if (!productName) {
            document.getElementById("ProductNameError").innerText = "Product Name is required.";
            isValid = false;
        }

        if (!price) {
            document.getElementById("PriceError").innerText = "Price is required.";
            isValid = false;
        }

        if (!noOfItem) {
            document.getElementById("NoofItemError").innerText = "Number of items is required.";
            isValid = false;
        }

        return isValid;
    }

    function validateDelete() {
        clearErrors();
        const productCode = document.getElementById("ProductCode").value.trim();
        const barcode = document.getElementById("Barcode").value.trim();

        if (!productCode && !barcode) {
            document.getElementById("ProductCodeError").innerText = "Provide Product Code or Barcode to delete.";
            document.getElementById("BarcodeError").innerText = "Provide Product Code or Barcode to delete.";
            return false;
        }

        return true;
    }

    function validateGet() {
        clearErrors();
        const productCode = document.getElementById("ProductCode").value.trim();
        const barcode = document.getElementById("Barcode").value.trim();

        if (!productCode && !barcode) {
            document.getElementById("ProductCodeError").innerText = "Provide Product Code or Barcode to fetch.";
            document.getElementById("BarcodeError").innerText = "Provide Product Code or Barcode to fetch.";
            return false;
        }

        return true;
    }

    function clearErrors() {
        document.getElementById("ProductCodeError").innerText = "";
        document.getElementById("BarcodeError").innerText = "";
        document.getElementById("CategoryNameError").innerText = "";
        document.getElementById("BrandNameError").innerText = "";
        document.getElementById("SizeNameError").innerText = "";
        document.getElementById("ProductNameError").innerText = "";
        document.getElementById("PriceError").innerText = "";
        document.getElementById("NoofItemError").innerText = "";
    }
</script>

<script>
    const moneyInput = document.getElementById('Price');
    const moneyError = document.getElementById('PriceError');

    // Function to format number in Indian format (e.g., 1,23,456.78)
    function formatToIndianCurrency(value) {
        // Split the integer and decimal parts
        let parts = value.split('.');
        let integerPart = parts[0];

        // Apply Indian numbering system formatting for the integer part
        let lastThree = integerPart.substring(integerPart.length - 3);
        let otherNumbers = integerPart.substring(0, integerPart.length - 3);

        if (otherNumbers !== '') {
            lastThree = ',' + lastThree;
        }

        let formattedInteger = otherNumbers.replace(/\B(?=(\d{2})+(?!\d))/g, ',') + lastThree;

        // Return formatted number with decimal part (if exists)
        return parts.length > 1 ? formattedInteger + '.' + parts[1].substring(0, 2) : formattedInteger;
    }

    moneyInput.addEventListener('input', function (e) {
        // Remove any characters that are not digits or periods
        let value = this.value.replace(/[^0-9.]/g, '');

        // Format the value to Indian currency format
        this.value = formatToIndianCurrency(value);

        // Check if the format is valid (integer part only or with 1-2 decimal places)
        const indianMoneyFormat = /^\d{1,3}(,\d{2})*(\.\d{0,2})?$/;

        // Show or hide the error message
        if (!indianMoneyFormat.test(this.value)) {
            moneyError.style.display = 'inline';
        } else {
            moneyError.style.display = 'none';
        }
    });

    
</script>
